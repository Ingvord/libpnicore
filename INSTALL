Installing pnicore
==================

1.) Requirements to build the library
    ---------------------------------
Minimum requirements:
-> C++ Compiler g++ >= 4.7
-> Boost library > 1.4
-> cmake >= 2.6.0
-> doxygen  (to build the documentation)
-> pdflatex to build the users guide
-> cppunit  (to build unit tests)
-> pkg-config needed to configure additional required packages


2.) Build and installation
    ----------------------

libpnicore has switched from scons to cmake as its build system. 
We strongly recommend to build the library in a separate  build directory. 
After obtaining the source tree (either by cloning the GIT repository or by
downloading a tarball) create a build directory

$> mkdir libpnicore_build

We assume here that the sources reside in some other directory named
'libpnicore'. 
Before the actual build you have to run cmake for configuration. For that
purpose change into the build directory

$> cd libpnicore_build
$> cmake ../libpnicore

and call cmake with the path to the original source directory. Once cmake is
done you can build the library simply with 

$> make 

This will only build the library's binary. In order to build the documentation
use 

$> make doc

3.) Testing the build 
    -----------------

To run the unit tests of the library use 

$> make test 

The output of this command should be self explaining. The tests are implemented
using cppunit. Every test program is writing an xml file with test reports. 
The xml files are stored in the test/ below the build directory. 

4.) Installation
    ------------

After testing, installation runs via the install target of the Makefile

$> make install

By default everything will be installed below /usr/local to which you have most
probably no write-permissions. To install the library at an alternative location
set the CMAKE_INSTALL_PREFIX during the cmake call 

$> cmake -DCMAKE_INSTALL_PREFIX=/home/me/local ../libpnicore

The output generated by make is rather sparse in comparision to other build
systems. To get more insight what make is actually doing when building the code
set the CMAKE_VERBOSE_MAKEFILE during configuration. For the example above this
would look like this:

$> cmake -DCMAKE_VERBOSE_MAKEFILE=ON ../libpnicore

The library currently provides two build types
- RELEASE
- DEBUG
The former one uses all optimizations available while the latter on is for
debuging purposes only. To set the build type use the CMAKE_BUILD_TYPE variable 

$> cmake -DCMAKE_BUILD_TYPE=DEBUG ...

It is important to note that the release types are case sensitive. You have to
use RELEASE or DEBUG.

4.1.) Prepare your environment 
      ------------------------

Before you can actually use the library you may have to set some environment
variables. LD_LIBRARY_PATH should point to the directory where the library
binary is installed. Furthermore, when pkg-config should be used one may has to
set the PKG_CONFIG_PATH which should point to
CMAKE_INSTALL_PREFIX/lib/pkgconfig. To test if your setup is correct try 
pkg-config 

$> pkg-config --cflags --libs pnicore

You should then obtain some compiler flags like the path to the libraries header
files and the linker flags required to link versus libpnicore. 





