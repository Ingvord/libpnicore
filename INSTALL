Installing pnicore
==================

1.) Requirements to build the library
    ---------------------------------
Minimum requirements:
-> C++ Compiler g++ >= 4.7
-> Boost library > 1.4
-> cmake >= 2.8.0
-> doxygen  (to build the documentation)
-> pdflatex to build the users guide
-> cppunit  (to build unit tests)
-> pkg-config needed to configure additional required packages
-> pdflatex to build the users guide

2.) Obtaining the sources
    ---------------------

libpnicore is hosted on GitHub. To obtain the tarball for a stable release go to
the release site of libpnicore's repository 

https://github.com/pni-libraries/libpnicore/releases

find the release for which you want to obtain the sources and glick on the
tar.gz or .zip button to obtain the code. 

If you would like to use the current development branch just clone the git
repository with  

git clone https://github.com/pni-libraries/libpnicore.git libpnicore

to some location on your local file system.


3.) Build and installation
    ----------------------

As libpnicore uses CMake for building the software we strongly recommend out of
source builds. After obtaining the source tree (see above) create a build
directory

$> mkdir libpnicore_build

change to it 

$> cd libpnicore_build

and run cmake 

$> cmake ../libpnicore

where the last argument to cmake is the path to the source directory. Once cmake
has successfully finished run make

$> make 

This will build the library's binaries. To optionally build the API
documentation use 

$> make html

and for the users guide 

$> make pdf

The output of the make run is rather sparse in comparison for instance to the 
autotools. In case of build errors it might help to run make with more 
verbose output using

$> VERBOSE=ON make

Finally there are two build type supported: RELEASE and DEBUG. While the 
former one is what you usually want for your users the DEBUG build can be quite
useful in case of problems with the code using the library. 
Which built type to use is determined during the cmake run by setting the 
CMAKE_BUILD_TYPE variable. For a debug build use 

$> cmake -DCMAKE_BUILD_TYPE=DEBUG ../libpnicore

The release build is the default.

4.) Testing the build 
    -----------------

To build the tests use 

$> make build-test 

and to run them 

$> make test 


4.) Installation
    ------------

After testing, installation runs via the install target of the Makefile

$> make install

The default installation prefix is /usr/local. The package will install files
into the following directories

/usr/local/lib                  - the library binaries 
/usr/local/lib/pkg-config       - the package config file
/usr/local/include              - the library header files
/usr/local/share/doc/libpnicore - API documentation, users guide, and examples

The default 'install' target only installs the libraries, header files, and the 
examples. In order to install the API documentation and the users guide 
use 

$> make install-html

and 

$> make install-pdf 

respectively. 

To change the installation prefix one has to set the CMAKE_INSTALL_PREFIX 
variable during the cmake run:

$> cmake -DCMAKE_INSTALL_PREFIX=/home/me/local ../libpnicore

Everything else runs as described above. 

4.1.) Prepare your environment 
      ------------------------

In order to make use of libpnicore your environment needs some preparation. 
If you have installed the library to a non-standard location you may have to
tell the system where to look for shared objects by setting the LD_LIBRARY_PATH
environment variable 

$> export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/libpnicore

In addition if you want to build code which should use libpnicore you should
setup pkg-config correctly. In the case of a non standard installation 
you have to set the PKG_CONFIG_PATH variable to the path where the pnicore.pc
file is installed. 

$> export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/path/to/lib/pkg-config

To check if this worked correctly just run 

$> pkg-config --cflags --libs pnicore

You should then obtain some compiler flags like the path to the libraries header
files and the linker flags required to link versus libpnicore. 





