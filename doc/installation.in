/*! \page installation Installation instructions

\c libpniutils can be either installed from source or from a binary package. The latter one is more
comfortable and requires not too much know how from the user, building from
source gives you more control over what and how the library will be installed. 
Thus installing binary packages is the recommended procedure for common users
while system administrators may want to build the package from source.

\section install_binary Installing the binary distribution

\subsection install_binary_req Required additional software

\c libpniutils links against several additional libraries which must be installed
in order to make the software working. It depends on your operating systems
whether or not this additional components must be explicitly installed by you or
the package installation system takes care about it. 

\subsection install_binary_linux Binary package installation on Linux 

\subsubsection install_binary_debian Installation on Debian and Ubuntu systems

For Ubuntu 10.04 and 12.04 binary packages are available via PPA on launchpad.
Using the PPA the installation reduces to the following three steps on the
command line
\code
$>sudo apt-add-repository ppa:eugenwintersberger/pni
$>sudo apt-get update
$>sudo apt-get install libpniutils-dev
\endcode
The first two lines integrate the PPA into your sources list for \c apt and
updates the package list. Finally, the last line installs the development files
of \c libpniutils.

On Debian Systems the installation is a bit more complicated as Debian provides
no remote repository.

\subsubsection install_binary_rpm Installation on RPM based distributions

For distributions using the RPM package system (like SuSe, RedHat, CentOS,
Scientific Linux, etc.) 

\subsection install_binary_windows Binary package installation on Windows

NOT SUPPORTED YET


\section install_source Installing from sources

\subsection build_req Build requirements

The following programs are required to build the entire source tree including
the documentation

\li <a href="http://www.scons.org"><tt>SCons</tt></a> the build system used for \c libpniutils
\li <a href="http://www.doxygen.org"><tt>doxygen</tt></a> documentation generator

Additionally \c libpniutils depends on a couple of libraries which must be installed on
the target system in order to build correctly:

\li <a href="http://www.vtk.org"><tt>VTK</tt></a>  - the Visualization toolkit from Kitware
\li \c cppunit  - a C++ unit-test framework
\li <a href="http://www.boost.org"><tt>BOOST</tt></a> - C++ libraries 

In addition \c libpniutils make use of a lot of new C++11 features. Thus a
recent compiler should be installed on your system. For gcc version 4.6 and
upwards are optimal. 
On most of the large Linux distributions these components may can be easily
installed directly from their package repositories. For Windows the appropriate
packages must be installed manually. 

\subsection obtaining_sources Obtaining the sources

The next step is to obtain the source code of \c libpniutils. A release tarball
can be downloaded from the <a href="http://sourceforge.net/projects/libpniutils/?source=directory">
sourceforge site of the project</a>. Once you obtained the tarball with the
actual release of \c libpniutils you can unpack it with
\code
$> tar xjf libpniutils*.tar.bz2 
\endcode
Alternatively you can clone the \c git repository from the sourceforge site. 
On Linux this can be done with
\code
$>git clone git://git.code.sf.net/p/libpniutils/code libpniutils
\endcode
Once the repository is cloned you will find the code in the \c libpniutils
directory below your current working directory. 

\subsection build_install_linux Building and installing on Linux

In the best case there is not too much left to do. Change to the source
directory and type 
\code
$>scons all 
\endcode
which should start the build. However, in many cases this will not work because
the VTK header files are usually not in the search path of the compiler. In this
case you have to provide the path explicitly, for instance as shown here with
\code
$>scons VTKINCDIR=/usr/include/vtk-5.4 all
\endcode
\c VTKINCDIR is a build variable telling \c scons where to search for header
files. The build system provides some more of this build variables. The
following ones influence mainly the build of the code

\li \c CXX - tells \c scons which compiler to use (default is \c g++ )
\li \c VTKINCDIR - path to the VTK header files
\li \c VKTLIBDIR - path to the VTK library binaries
\li \c BOOSTINCDIR - path to the BOOST header files (the path to the directory
where \c ./boost is installed)
\li \c BOOSTLIBDIR - path to the BOOST library binaries
\li \c CPPUINCDIR - path to the CPPUnit header files
\li \c CPPULIBDIR - path to the CPPUnit library binaries

A second set of variables is responsible for determining the location where all
the components of the library will be installed. These are

\li \c PREFIX - installation prefix (default is \c /usr/local)
\li \c LIBDIR - installation path for the library binaries (default is \c PREFIX/lib)
\li \c INCDIR - installation path for the library headers (default is \c PREFIX/include)
\li \c DOCDIR - installation path for the documentation (default is \c PREFIX/share/doc/libpniutils)

Usually the location where binaries, headers, and documentation files are
installed are determined by the \c PREFIX build variable. However, \c LIBDIR, \c INCDIR, 
and \c DOCDIR give you the opportunity to tune the installation entirely to your
needs.

The build command as shown above uses the  \c all target. This target will build
the library along with the unit tests and the documentation.  For installation
use the \c install target. Since \c scons actually runs the full configuration
for the \c all as well as for the \c install target you need to provide the same
build variables for both calls. Let us for example show a build where the
library should be installed below \c /opt but the documentation goes to a
slightly different location
\code
$> scons VKTINCDIR=/usr/include/vtk-5.4 PREFIX=/opt/libpniutils DOCDIR=/opt/share/doc/libpniutils install
\endcode

\subsection build_install_windows Building and installing on Windows 

NOT SUPPORTED YET






*/
