/*! \mainpage libpniutils @VERSION@ documentation

Libpniutils is a utility library for a bunch of PNI related libraries. 
It provides the basic data structures and type definitions as well as 
type conversion facilities needed to write reliable code. 

This is the API documentation for libpniutils. If you are interested in a more
general discussion about the library and its components please read the 
uses guide or the administrators guide.  
 
 
 
*/

/*! \defgroup util_classes Utility classes
    Utility classes used throughout the entire code.
*/

/*! \defgroup error_classes Exception classes

Libpniutils provides a set of standard exceptions that can be used throughout
your C++ code. All exceptions derive from a base class Exception
which by itself is a child  of std::exception. Each exception has a name,
an issuer and a description which can be evaluated by the instance that
catches the exception. The issuer is the signature of the method or
function that throws the exception.
To simplify the setup of the exception system use the
EXCEPTION_SETUP() macro at the very beginning of a method or function to
initialize some local variables which will be used for exception handling.
In case of an error the macros EXCEPTION_INIT() and EXCEPTION_THROW()
can be used to initialize and throw a particular exception.

To explain this in more detail lets have a look in the following example:
\code
int myfunction(double x,double y){
    EXCEPTION_SETUP("int myfunction(double x,double y)");

    ..... code omitted ....

    if(x<0){
        EXCEPTION_INIT(RangeError,"X must not be smaller than 0!");
        EXCEPTION_THROW();
    }

    ..... code omitted ....

}
\endcode
Right after the definition of the function the macro EXCEPTION_SETUP() is
called where the signature of the function is passed as its only argument.
This signature will be later used as the issuer for all exceptions thrown
within this function.
Later when an error occurs EXCEPTION_INIT() is used to initialize an
exception of a particular type along with a description of the error.
In the example above RangeError exception is thrown.
Finally use EXCEPTION_THROW() to throw the exception.
*/

/*! \defgroup data_classes Data classes
    This classes hold data in memory. Actually this data is considered to 
    be of numeric type. Each data holding entity has a name and a description
    where the latter provides information about what data is held by the 
    object. The name is just for identification of the object.
    NumericObject is the root of all numeric objects provided by the 
    library (which are basically scalars and arrays). In addition to name and 
    description each numerical data object holds a string representing the 
    physical unit of the numbers stored in the object.
    Scalar and array objects derive from NumericObject.
*/

/*! \defgroup io_classes IO classes
    Classes responsible for reading (and maybe in future writing) data. The 
    aim of these classes is to read data from proprietary image formats used 
    by detector vendors. Actually only TIFF and the CBF dialect from DECTRIS
    are supported. 
    \section io_introduction Basic design for IO classes
    <table border="0" align="center">
    <tr>
    <td> 
    \image html image_format.svg Basic structure of an image file.
    </td>
    <td>
    \image html image_frame.svg Structure of a single image frame.
    <td>
    \image html spreadsheet_format.svg Structure of a spreadsheet file.
    </td>
    </tr>
    </table>

    The IO classes distinguish between two different kinds of file formats
    - image formats
    - and spreadsheet formats

    In the following subsection these two concepts will be explained in more
    detail.

    \subsection image_formats Image formats

    Image formats usually consists of a binary or ASCII file-wide global header
    followed by one or more images. An individual image by itself can consist of
    a specific header which is written in ASCII or binary followed by the image
    data. It is important to note that image data must not subsequently follow
    the image header but can be stored somewhere in the file. 

    An individual image can consist of several layers (channel) where the data
    of each channel can be represented by a different data type. 
    Class ImageInfo holds the basic information for each individual image in a
    file. This information includes the resolution of the image, the number of
    pixels per channel, and the data-type used for each channel. Every reader
    class must gather this information from the file for each image stored in
    it. 

    \subsection spreadsheet_formats Spreadsheet formats

    This are typically ASCII formats used by a lot of experiment control systems
    (FIO from ONLINE at DESY or SPEC at the ESRF). As the name used for these
    formats suggests data is stored in a spreadsheet like manner. Such files may
    have a global header and store a single (like FIO) or many (like SPEC)
    spreadsheets.
    Each spreadsheet consist again of a header and a couple of columns which
    hold the data. The data of each column is of a particular data-type and can
    be a scalar value or a multidimensional array. 
    The entries from all columns at a particular point in the measurement form a
    record. Reading records is currently not supported.
    Data can be stored in a column wise or record-wise order. In the former case
    record data is stored subsequent in the file while in the latter case the
    data of each column is linear in the file-stream.
    
    \section io_formats Supported formats
    
    Supported Image formats are
    <table >
    <tr>
    <th> File format </th>
    <th> class </th>
    <th> remarks </th>
    </tr>
    <tr> <td> TIFF </td> <td> TIFFReader </td> 
    <td>
    Full support of TIFF files except for bi-color images using a single Bit for
    each pixel.
    </td>
    </tr>
    <tr> <td> CBF (Dectris) </td> <td> CBFReader </td> 
    <td>
    Actually only the CBF dialect used by DECTRIS for their PILATUS detectors is
    supported.
    </td>
    </tr>
    </table>

    Supported spreadsheet (ASCII) formats
    <table > 
    <tr> <th> File format </th> <th> class </th> <th> remarsk </th></tr> 
    <tr> <td> FIO (DESY) </td> <td> FIOReader </td> 
    <td>
    FIO is a file format produced by the ONLINE control system used at DESY. 
    </td>
    </tr>
    </table>
*/

/*! \defgroup type_classes Data type related classes
    Data types and their correct handling plays an important role for 
    experiment data. This module contains all type definitions and classes 
    to obtain information from a type as well as converting types from one 
    to each other. \c libpninx basically follows the type conversion strategies
    of C++ with some exceptions. For instance, unlike in C++ conversion from
    floating point type to integer types is prohibited. This should avoid
    unintentional round-off errors that would occur during such a conversion. 
*/

