import os.path as path
Import("build_env")


#----------------------Building object files------------------------------------
source_list = ["ScalarObject.cpp","Scalar.cpp","BufferObject.cpp",
               "ArrayObject.cpp","Array.cpp","ArrayShape.cpp","Exceptions.cpp",
               "DataObject.cpp","NumericObject.cpp"]
               
#build static and shared objects               
shared_objects = build_env.SharedObject(source_list)
static_objects = build_env.StaticObject(source_list)
(shared_io_objects,static_io_objects) = SConscript("io/SConscript")
shared_objects.append(shared_io_objects)
static_objects.append(static_io_objects)

#----------------------Linking libraries----------------------------------------
#link temporary shared library
temp_shared_library = build_env.SharedLibrary("temp",shared_objects,
                      so_version="${SOVERSION}")
#create real target library with proper permissions                                                                     
shared_library = build_env.Command("${LIBFULLNAME}",temp_shared_library[0],
                 [  Move("$TARGET","$SOURCE"), Chmod("$TARGET",0644)])

#creating links to the target library according to GNU naming convention
shared_library_link = build_env.Command("${LIBLINKNAME}",shared_library,
                     "cd src/; ln -sf ${SOURCE.file} ${TARGET.file}")
shared_library_so = build_env.Command("${LIBSONAME}",shared_library,
                    "cd src/; ln -sf ${SOURCE.file} ${TARGET.file}")
                                 
#link static library
static_library = build_env.StaticLibrary("${LIBNAME}",static_objects)


#---------------------build the pkg-config file---------------------------------
pkg_source = ["prefix = ${PREFIX}",
              "exec_prefix = ${prefix}",
              "includedir = ${prefix}/include/pni/utils",
              "libdir = ${prefix}/lib","",
              "Name: ${LIBNAME}" ,
              "Description: PNI utility library",
              "Version: ${VERSION}" ,
              "Cflags: -I${includedir}",
              "Libs: -L${libdir} -l${LIBNAME}"]              

pkg_config_file = build_env.Textfile(target="${LIBNAME}",source=pkg_source,
                  TEXTFILESUFFIX=".pc")

#-------------------adding everyting to the "all" and "library" target----------
build_env.Alias("all",[temp_shared_library,
                       shared_library,shared_library_link,shared_library_so,
                       static_library,pkg_config_file])
build_env.Alias("library",[temp_shared_library,
                           shared_library,shared_library_link,shared_library_so,
                           static_library,pkg_config_file])

#---------------------installation----------------------------------------------

#install libraries
shared_library_install = build_env.Install("${LIBINSTPATH}",[shared_library])
static_library_install = build_env.Install("${LIBINSTPATH}",[static_library])

#create links for the link and so name versions of the library
inst_path = path.dirname(str(shared_library_install[0]))
shared_library_link_install = build_env.Command(inst_path+"/${LIBLINKNAME}",shared_library_install,
                  "cd ${SOURCE.dir}; ln -sf ${SOURCE.file} ${TARGET.file}")
                  
shared_library_so_install = build_env.Command(inst_path+"/${LIBSONAME}",shared_library_install,
                  "cd ${SOURCE.dir}; ln -sf ${SOURCE.file} ${TARGET.file}")
print shared_library_so_install
print shared_library_install[0]                  

#install the package-config file
pkgc_inst = build_env.Install("${LIBINSTPATH}/pkgconfig",[pkg_config_file])

#install the header files
incpniutils_inst = build_env.Install("${INCINSTPATH}",Glob("*.hpp"))

#add all installation targets to the global "install" target
build_env.Alias("install",[shared_library_install,static_library_install,
                           incpniutils_inst,pkgc_inst,
                           shared_library_link_install,
                           shared_library_so_install])



