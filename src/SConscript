import os.path as path

Import("build_env")

source_list = ["BufferObject.cpp","ArrayObject.cpp","Array.cpp","ArrayShape.cpp","Exceptions.cpp","DataObject.cpp"]
               
obj = build_env.SharedObject(source_list)
aobj = build_env.StaticObject(source_list)
(sioobj,aioobj) = SConscript("io/SConscript")
obj.append(sioobj)
aobj.append(aioobj)

libpniutils=build_env.SharedLibrary("pniutils",obj,so_version="0")
statlibpniutils = build_env.StaticLibrary("pniutils",aobj)
build_env.Alias("all",[libpniutils,statlibpniutils])
build_env.Alias("library",[libpniutils,statlibpniutils])

fname = "pniutils.pc"

lib_inst_path = path.join(build_env["ENV"]["INSTALL_PREFIX"],"lib")
hdr_inst_path = path.join(build_env["ENV"]["INSTALL_PREFIX"],"include/pni")

if "install" in COMMAND_LINE_TARGETS:
    fid = open(fname,"w")
    fid.write("prefix=%s\n" %(build_env["PREFIX"]))
    fid.write("exec_prefix=${prefix}\n")
    fid.write("includedir=${prefix}/include\n")
    fid.write("libdir=${prefix}/lib\n\n")
    fid.write("Name: pniutils\n")
    fid.write("Description: a stupid library\n")
    fid.write("Version: 0.0.1\n");
    fid.write("Cflags: -I${includedir}\n")
    fid.write("Libs: -L${libdir} -lpniutils")
    fid.close()


libpniutils_inst = build_env.Install(lib_inst_path,[libpniutils,statlibpniutils])
pkgc_inst = build_env.Install(path.join(lib_inst_path,"pkgconfig"),[fname])
incpniutils_inst = build_env.Install(hdr_inst_path,Glob("*.hpp"))
build_env.Alias("install",[libpniutils_inst,incpniutils_inst,pkgc_inst])

