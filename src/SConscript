import os.path as path
Import("build_env")


#----------------------Building object files------------------------------------
source_list = []
source_list.extend(Glob("*.cpp"))
source_list.extend(Glob("benchmark/*.cpp"))
source_list.extend(Glob("config/*.cpp"))
               
#build static and shared objects               
shared_objects = build_env.SharedObject(source_list)
static_objects = build_env.StaticObject(source_list)

#----------------------Linking libraries----------------------------------------
#link temporary shared library
temp_shared_library = build_env.SharedLibrary("temp",shared_objects,
                      so_version="${SOVERSION}")
#create real target library with proper permissions                                                                     
shared_library = build_env.Command("${LIBFULLNAME}",temp_shared_library[0],
                 [  Move("$TARGET","$SOURCE"), Chmod("$TARGET",0644)])

#creating links to the target library according to GNU naming convention
shared_library_link = build_env.Command("${LIBLINKNAME}",shared_library,
                     "cd src/; ln -sf ${SOURCE.file} ${TARGET.file}")
shared_library_so = build_env.Command("${LIBSONAME}",shared_library,
                    "cd src/; ln -sf ${SOURCE.file} ${TARGET.file}")
                                 
#link static library
static_library = build_env.StaticLibrary("${LIBNAME}",static_objects)


#---------------------build the pkg-config file---------------------------------              
#assemble linker path

pkg_config_file = build_env.Substfile(target="${LIBNAME}",source=["pkgconf.in"],
                  SUBST_DICT={"@PREFIX@":"${PREFIX}","@LIBNAME@":"${LIBNAME}",
                  "@INCDIR@":build_env["INCDIR"].replace("/pni/core",""),
                  "@VERSION@":"${VERSION}","@INCPATH@":"${_CPPINCFLAGS}",
                  "@DEFINES@":"${_CPPDEFFLAGS}",
                  "@LIBPATH@":"${_LIBDIRFLAGS}","@LIBS@":"${_LIBFLAGS}"},
                  SUBSTFILESUFFIX=".pc")
build_env.AlwaysBuild(pkg_config_file)

#----------------------create configuration header------------------------------
config_header = build_env.Substfile(target="config.h",source=["config.h.in"],
                  SUBST_DICT={"@CONFIG_FILE_PATH@":"${PREFIX}/etc/pniutils.cfg"}
                  )
build_env.AlwaysBuild(config_header)
build_env.Alias("install",build_env.Install("${INCDIR}",config_header))

#-------------------adding everyting to the "all" and "library" target----------
build_env.Alias("all",[temp_shared_library,
                       shared_library,shared_library_link,shared_library_so,
                       static_library,pkg_config_file])
build_env.Alias("library",[temp_shared_library,
                           shared_library,shared_library_link,shared_library_so,
                           static_library,pkg_config_file])

#---------------------installation----------------------------------------------

#install libraries
shared_library_install = build_env.Install("${LIBDIR}",[shared_library])
static_library_install = build_env.Install("${LIBDIR}",[static_library])

#create links for the link and so name versions of the library
inst_path = path.dirname(str(shared_library_install[0]))
shared_library_link_install = build_env.Command(inst_path+"/${LIBLINKNAME}",shared_library_install,
                  "cd ${SOURCE.dir}; ln -sf ${SOURCE.file} ${TARGET.file}")
                  
shared_library_so_install = build_env.Command(inst_path+"/${LIBSONAME}",shared_library_install,
                  "cd ${SOURCE.dir}; ln -sf ${SOURCE.file} ${TARGET.file}")                

#install the package-config file
pkgc_inst = build_env.Install("${LIBDIR}/pkgconfig",[pkg_config_file])

#install the header files
incpniutils_inst = build_env.Install("${INCDIR}",Glob("*.hpp"))
build_env.Alias("install",build_env.Install("${INCDIR}/math",Glob("math/*.hpp")))
build_env.Alias("install",build_env.Install("${INCDIR}/config",Glob("config/*.hpp")))
build_env.Alias("install",build_env.Install("${INCDIR}/benchmark",Glob("benchmark/*.hpp")))
build_env.Alias("install",build_env.Install("${INCDIR}/hardware",Glob("hardware/*.hpp")))

#install configuration file
build_env.Alias("install",build_env.Install("${PREFIX}/etc","pniutils.cfg"))


#add all installation targets to the global "install" target
build_env.Alias("install",[shared_library_install,static_library_install,
                           incpniutils_inst,pkgc_inst,
                           shared_library_link_install,
                           shared_library_so_install])



