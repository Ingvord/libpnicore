Import("test_build_env")

test_env = test_build_env.Clone()

#need to use here prepend in order to avoid triggering the istallation process
test_env.Prepend(LIBPATH=["../src/"])
if not test_env["NOPLPLOT"]:
    test_env.Append(LIBS=["pniutils","cppunit","plplotcxxd"])
else:
    test_env.Append(LIBS=["pniutils","cppunit"])

test_env.Append(CPPPATH=["../src/"])

sources_list = ["pniutilstest.cpp"]
sources_list.extend(["BufferTest.cpp"])
sources_list.extend(["IndexTest.cpp"])
sources_list.extend(["DataObjectTest.cpp"])
sources_list.extend(["NumericObjectTest.cpp"])
sources_list.extend(["ArrayTest.cpp"])
sources_list.extend(["ShapeTest.cpp"])
sources_list.extend(["ScalarTest.cpp"])
sources_list.extend(["BinaryTest.cpp"])
sources_list.extend(["TypeMapsTest.cpp"])
sources_list.extend(["IndexMapTest.cpp"])

pniutils_test = test_env.Program("pniutilstest",sources_list)
showtypes = test_env.Program("showPNITypes.cpp")
benchmark = test_env.Program("utbmark","bmark.cpp")
test_targets = [pniutils_test,showtypes,benchmark]

if not test_env["NOPLPLOT"]:
    cbfreader_test = test_env.Program("cbf_reader_test",["cbf_reader_test.cpp"])
    tifreader_test = test_env.Program("tif_reader_test",["tif_reader_test.cpp"])
    test_targets.extend([cbfreader_test,tifreader_test])

test_env.Alias("test",test_targets)
test_env.Alias("all",test_targets)
