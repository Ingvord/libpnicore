from os import path
import re
Import("test_env")


#need to use here prepend in order to avoid triggering the istallation process
test_env.Prepend(LIBPATH=["../src/"])
test_env.Append(LIBS=["pniutils"])

test_env.Append(CPPPATH=["../src/"])

sources_list = ["pniutilstest.cpp"]
sources_list.extend(["DynamicBufferTest.cpp"])
sources_list.extend(["RefBufferTest.cpp"])
sources_list.extend(["StaticBufferTest.cpp"])
sources_list.extend(["SizeTypeTest.cpp"])
sources_list.extend(["StaticShapeTest.cpp"])
sources_list.extend(["StrideTypeTest.cpp"])
sources_list.extend(["IteratorTest.cpp"])
sources_list.extend(["IndexMapTest.cpp"])
sources_list.extend(["ArraySelectionTest.cpp"])
sources_list.extend(["StaticArrayTest.cpp"])
#sources_list.extend(["DataObjectTest.cpp"])
#sources_list.extend(["NumericObjectTest.cpp"])
#sources_list.extend(["ArrayTest.cpp"])
#sources_list.extend(["ShapeTest.cpp"])
#sources_list.extend(["ScalarTest.cpp"])
#sources_list.extend(["BinaryTest.cpp"])
#sources_list.extend(["TypeMapsTest.cpp"])
#sources_list.extend(["IndexMapTest.cpp"])
#sources_list.extend(["ArrayViewTest.cpp"])
#sources_list.extend(["SliceTest.cpp"])
#sources_list.extend(["DynamicArrayTest.cpp"])

pniutils_test = test_env.Program("pniutilstest",sources_list)
iterbm = test_env.Program("iterbm","iteratorbm.cpp")
#showtypes = test_env.Program("showPNITypes.cpp")
#benchmark = test_env.Program("utbmark","bmark.cpp")
test_targets = [pniutils_test,iterbm]

    

if 'testrun' in COMMAND_LINE_TARGETS:
    def check_test_log(target,source,env):
        end_of_test = re.compile(r"^Test Results:")
        issue = re.compile(r"\d*\)")
    
        #open the log file
        lfile = file(path.join("test",source[0].name))
        #move to the results section
        for line in lfile: 
            if end_of_test.match(line): break

        #show test results
        error_flag = False
        for line in lfile:
            print line
            if issue.match(line): 
                error_flag = True

        if error_flag: 
            Exit(1)

    print "Running unit tests ...."
    #delete the original log file
    test_run = test_env.Command("testrun.log",pniutils_test,
                    ["export LD_LIBRARY_PATH=src; echo \"start test\"; $SOURCE > $TARGET"])
    AlwaysBuild(test_run) 
    test_check = test_env.Command("testrun.check",test_run,check_test_log)
    test_env.Alias("testrun",[test_run,test_check])

test_env.Alias("test",test_targets)
